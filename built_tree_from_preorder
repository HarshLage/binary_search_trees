/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode * builtree(TreeNode * &root  , int data){
        if(root==NULL){
             root = new TreeNode(data);
        }

        if(data < root->val){
            root->left = builtree(root->left , data);
        }
        else if (data > root -> val){
            root -> right = builtree(root->right, data);
        }
        return root;

    }
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        if(preorder.empty()){
            return nullptr;
        }
        // TreeNode * root = new TreeNode(preorder[0]);
        // if(preorder.size()==1){
        //     return root;
        // }
        // builttree( root , preorder,preorder[1]);
        // return root;
        TreeNode * root = NULL;
        for(int i=0;i<preorder.size();i++){
            root = builtree(root,preorder[i]);
        }
        return root;


    }
};
